CRIME HOTSPOT MAPPING 





DEVELOPED BY JAYANTHAN 



PROJECT DESCRIPTION :
# CrimeHotspotMapping


## Project Overview


The **CrimeHotspotMapping** project aims to develop an advanced crime analysis and prediction system that leverages data to identify and monitor crime hotspots within a city. The system will analyze various sources of data, including distress call records and historical crime data, to identify patterns in crime frequency, type, time of occurrence, and geographic location. By doing so, the tool will provide valuable insights to law enforcement agencies, enabling them to allocate resources more effectively and implement proactive strategies for crime prevention.


## Features


- **Crime Trend Analysis:**
 - Analyzes historical crime data to identify patterns and trends over time.
 - Identifies high-crime areas and periods of increased criminal activity.
 - **Real-time Updates:**
 - Provides real-time updates on active crime hotspots based on live data.
 - **Predictive Analytics:**
 - Uses historical data and machine learning models to predict potential future crime hotspots.
 - **Geographic Mapping:**
 - Visualizes crime data on maps to help authorities understand geographic crime distribution.
 - **Crime Type Analysis:**
 - Analyzes the frequency and types of crimes occurring in specific locations, assisting in focused policing efforts.
 - **Resource Allocation Recommendations:**
 - Suggests areas for focused policing or community outreach based on data-driven insights.
 - **Reports & Visualizations:**
 - Generates detailed reports and visual dashboards to assist in policy-making, resource planning, and crime prevention strategies.


## Installation


To run the **CrimeHotspotMapping** system locally, follow these steps as listed below:


### Prerequisites


Ensure you have the following software installed on your machine:


- **Node.js** (v16 or higher)
- **npm** or **yarn**






#ppt
[Crime Hotspot Mapping (2).pdf](https://github.com/user-attachments/files/19477657/Crime.Hotspot.Mapping.2.pdf)


#video
https://drive.google.com/file/d/1fVoQ3GMF4yDXRXFggYjkDtIArzWF2Jwz/view?usp=sharing


#Workflow
 https://claude.site/artifacts/8e41fe9f-1601-4b84-8226-39e3172b7af6
 ### Clone the Repository


```bash
git clone https://github.com/yourusername/crimehotspotmapping.git
cd crimehotspotmapping
npm i
npm run dev







 
SOUCE CODES : 
                     : 
1. import React from 'react';
2. import { motion } from 'framer-motion';
3. import { Outlet } from 'react-router-dom';
4. import Sidebar from './Sidebar';
5. import Navbar from './Navbar';
6. 7. const Layout: React.FC = () => {
8.  return (
9.    <div className="flex h-screen bg-gray-100">
10.      <Sidebar />
11.      <div className="flex-1 flex flex-col overflow-hidden">
12.        <Navbar />
13.        <motion.main
14.          className="flex-1 overflow-x-hidden overflow-y-auto bg-gray-100"
15.          initial={{ opacity: 0, y: 20 }}
16.          animate={{ opacity: 1, y: 0 }}
17.          transition={{ duration: 0.5 }}
18.        >
19.          <div className="container mx-auto px-6 py-8">
20.            <Outlet />
21.          </div>
22.        </motion.main>
23.      </div>
24.    </div>
25.  );
26. }
27. 28. export default Layout
29. 

import React from 'react';
import { Bell, Search, User } from 'lucide-react';
import { motion } from 'framer-motion';
import { useAuth } from '../context/AuthContext';


const Navbar: React.FC = () => {
 const { user } = useAuth();
  return (
   <motion.nav
     className="bg-white shadow-lg"
     initial={{ y: -100 }}
     animate={{ y: 0 }}
     transition={{ duration: 0.5 }}
   >
     <div className="mx-auto px-6 py-3">
       <div className="flex items-center justify-between">
         <div className="flex items-center">
           <span className="text-xl font-semibold text-gray-800">
             CrimeSpot - Thoothukudi Police
           </span>
         </div>
        
         <div className="flex items-center gap-4">
           <div className="relative">
             <input
               type="text"
               placeholder="Search..."
               className="w-64 px-4 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-blue-500"
             />
             <Search className="absolute right-3 top-2.5 text-gray-400" size={20} />
           </div>
          
           <button className="p-2 hover:bg-gray-100 rounded-full relative">
             <Bell size={20} />
             <span className="absolute top-0 right-0 h-4 w-4 bg-red-500 rounded-full text-xs text-white flex items-center justify-center">
               3
             </span>
           </button>
          
           <div className="flex items-center gap-2">
             <span className="text-sm font-medium text-gray-700">
               {user?.name} ({user?.role})
             </span>
             <button className="p-2 hover:bg-gray-100 rounded-full">
               <User size={20} />
             </button>
           </div>
         </div>
       </div>
     </div>
   </motion.nav>
 );


};


export default Navbar;


import React from 'react';
import { NavLink } from 'react-router-dom';
import {
 Home,
 Map,
 FileText,
 Users,
 Settings,
 BarChart2,
 Shield,
 LogOut
} from 'lucide-react';
import { motion } from 'framer-motion';
import { useAuth } from '../context/AuthContext';


const Sidebar: React.FC = () => {
 const { user, logout } = useAuth();




 const menuItems = [
   { icon: Home, label: 'Dashboard', path: '/' },
   { icon: Map, label: 'Crime Map', path: '/crime-map' },
   { icon: FileText, label: 'Reports', path: '/reports' },
   { icon: BarChart2, label: 'Analytics', path: '/analytics' },
   ...(user?.role === 'admin' ? [{ icon: Users, label: 'Officers', path: '/officers' }] : []),
   { icon: Settings, label: 'Settings', path: '/settings' },
 ];


 return (
   <motion.div
     className="bg-[#1a237e] text-white w-64 flex flex-col"
     initial={{ x: -250 }}
     animate={{ x: 0 }}
     transition={{ duration: 0.5 }}
   >
     <div className="p-6 flex items-center gap-3">
       <Shield size={32} />
       <span className="text-xl font-bold">CrimeSpot </span>
     </div>
    
     <nav className="flex-1 px-4 py-6">
       {menuItems.map((item) => (
         <NavLink
           key={item.path}
           to={item.path}
           className={({ isActive }) =>
             `flex items-center gap-4 px-4 py-3 rounded-lg transition-colors ${
               isActive ? 'bg-white/10' : 'hover:bg-white/5'
             }`
           }
         >
           <item.icon size={20} />
           <span>{item.label}</span>
         </NavLink>
       ))}
     </nav>
    
     <div className="p-4 border-t border-white/10">
       <button
         onClick={logout}
         className="flex items-center gap-4 px-4 py-3 w-full rounded-lg hover:bg-white/5 transition-colors"
       >
         <LogOut size={20} />
         <span>Logout</span>
       </button>
     </div>
   </motion.div>
 );
};


export default Sidebar;
import React, { createContext, useContext, useState, useEffect } from 'react';
import { User, MOCK_USERS } from '../types/auth';


interface AuthContextType {
 user: User | null;
 login: (email: string, password: string) => Promise<boolean>;
 logout: () => void;
 isLoading: boolean;
}


const AuthContext = createContext<AuthContextType | undefined>(undefined);


export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
 const [user, setUser] = useState<User | null>(null);
 const [isLoading, setIsLoading] = useState(true);


 useEffect(() => {
   const storedUser = localStorage.getItem('user');
   if (storedUser) {
     setUser(JSON.parse(storedUser));
   }
   setIsLoading(false);
 }, []);


 const login = async (email: string, password: string): Promise<boolean> => {
   const foundUser = MOCK_USERS.find(
     u => u.email === email && u.password === password
   );


   if (foundUser) {
     const { password: _, ...userWithoutPassword } = foundUser;
     setUser(userWithoutPassword);
     localStorage.setItem('user', JSON.stringify(userWithoutPassword));
     return true;
   }
   return false;
 };


 const logout = () => {
   setUser(null);
   localStorage.removeItem('user');
 };


 return (
   <AuthContext.Provider value={{ user, login, logout, isLoading }}>
     {children}
   </AuthContext.Provider>
 );
};


export const useAuth = () => {
 const context = useContext(AuthContext);
 if (context === undefined) {
   throw new Error('useAuth must be used within an AuthProvider');
 }
 return context;
};
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import Map, { Marker, Popup } from 'react-map-gl';
import {  Users } from 'lucide-react';
import { MapPin } from "lucide-react";
import 'mapbox-gl/dist/mapbox-gl.css';


const MAPBOX_TOKEN = 'pk.eyJ1Ijoic21pbGVlZSIsImEiOiJjbThuejMzMjIwNHJvMmpzNXd6MXNtZnM4In0.rsQhRY5hN4lS3SeCL0ZXRA';


const CrimeMap: React.FC = () => {
 // Thoothukudi coordinates (centered on the district)
 const [viewState, setViewState] = useState({
   latitude: 8.7642,
   longitude: 78.1348,
   zoom: 10,  // Adjusted zoom level to show more of the district
 });


 const [selectedHotspot, setSelectedHotspot] = useState<any>(null);
 const [showPatrolModal, setShowPatrolModal] = useState(false);


 // Mock data for Thoothukudi district
 const MOCK_CRIME_DATA = {
   hotspots: [
     {
       id: 1,
       lat: 8.7642,
       lng: 78.1348,
       location: "Thoothukudi City",
       incidents: 15
     },
     {
       id: 2,
       lat: 8.5833,
       lng: 78.1167,
       location: "Tiruchendur",
       incidents: 8
     },
     {
       id: 3,
       lat: 8.8000,
       lng: 78.1500,
       location: "Kayalpattinam",
       incidents: 5
     },
     {
       id: 4,
       lat: 8.6333,
       lng: 77.9833,
       location: "Srivaikuntam",
       incidents: 7
     },
     {
       id: 5,
       lat: 8.7167,
       lng: 78.0833,
       location: "Ettayapuram",
       incidents: 4
     }
   ]
 };


 return (
   <motion.div
     initial={{ opacity: 0, y: 20 }}
     animate={{ opacity: 1, y: 0 }}
     transition={{ duration: 0.5 }}
     className="space-y-6 p-6"
   >
     <div className="flex items-center justify-between">
       <div>
         <h1 className="text-3xl font-bold text-gray-800">  Thoothukudi Crime Map</h1>
         <p className="mt-2 text-gray-600">Interactive map of crime hotspots in Thoothukudi district     </p>
       </div>
       <button
         onClick={() => setShowPatrolModal(true)}
         className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
       >
         <Users size={20} />
         Allocate Patrol
       </button>
     </div>


     <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
       <div className="lg:col-span-2">
         <div className="bg-white rounded-2xl shadow-lg h-[600px]">
           <Map
             {...viewState}
             onMove={(evt) => setViewState(evt.viewState)}
             mapStyle="mapbox://styles/mapbox/streets-v11"
             mapboxAccessToken={MAPBOX_TOKEN}
             style={{ width: '100%', height: '100%', borderRadius: '1rem' }}
           >
             {MOCK_CRIME_DATA.hotspots.map((hotspot) => (
               <Marker
                 key={hotspot.id}
                 latitude={hotspot.lat}
                 longitude={hotspot.lng}
                 onClick={(e) => {
                   e.originalEvent.stopPropagation();
                   setSelectedHotspot(hotspot);
                 }}
               >
                 <MapPin className="text-red-500 w-8 h-8 -translate-x-1/2 -translate-y-1/2 cursor-pointer hover:text-red-600 transition-colors" />
               </Marker>
             ))}
            
             {selectedHotspot && (
               <Popup
                 latitude={selectedHotspot.lat}
                 longitude={selectedHotspot.lng}
                 onClose={() => setSelectedHotspot(null)}
                 closeButton={true}
                 closeOnClick={false}
                 anchor="bottom"
               >
                 <div className="p-4">
                   <h3 className="font-semibold text-gray-800">{selectedHotspot.location}</h3>
                   <p className="text-sm text-gray-600">{selectedHotspot.incidents} incidents reported</p>
                   <p className="text-xs text-gray-500 mt-1">Thoothukudi District</p>
                 </div>
               </Popup>
             )}
           </Map>
         </div>
       </div>


       {/* Rest of your component remains the same */}
       <div className="space-y-6">
         <div className="bg-white rounded-2xl shadow-lg p-6">
           <h2 className="text-lg font-semibold mb-4 text-gray-800">Hotspot Analysis</h2>
           <div className="space-y-4">
             {MOCK_CRIME_DATA.hotspots.map((hotspot) => (
               <div
                 key={hotspot.id}
                 className="p-4 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100 transition-colors"
                 onClick={() => {
                   setViewState({
                     ...viewState,
                     latitude: hotspot.lat,
                     longitude: hotspot.lng,
                     zoom: 14,
                   });
                   setSelectedHotspot(hotspot);
                 }}
               >
                 <div className="flex items-center justify-between">
                   <p className="font-medium text-gray-800">{hotspot.location}</p>
                   <span className="text-red-500 font-medium">{hotspot.incidents}</span>
                 </div>
                 <p className="text-sm text-gray-600 mt-1">High risk area</p>
               </div>
             ))}
           </div>
         </div>


         <div className="bg-white rounded-2xl shadow-lg p-6">
           <h2 className="text-lg font-semibold mb-4 text-gray-800">AI Recommendations</h2>
           <div className="space-y-4">
             <div className="p-4 bg-purple-50 rounded-lg">
               <p className="font-medium text-purple-900">Optimal Patrol Times</p>
               <p className="text-sm text-purple-700 mt-1">18:00 - 22:00</p>
             </div>
             <div className="p-4 bg-blue-50 rounded-lg">
               <p className="font-medium text-blue-900">Required Officers</p>
               <p className="text-sm text-blue-700 mt-1">4-6 officers per shift</p>
             </div>
           </div>
         </div>
       </div>
     </div>


     {/* Modal remains the same */}
     {showPatrolModal && (
       <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
         <motion.div
           initial={{ opacity: 0, scale: 0.9 }}
           animate={{ opacity: 1, scale: 1 }}
           className="bg-white rounded-2xl shadow-xl p-6 max-w-md w-full mx-4"
         >
           <h2 className="text-xl font-semibold mb-4 text-gray-800">Schedule Patrol Meeting</h2>
           <form className="space-y-4">
             <div>
               <label className="block text-sm font-medium text-gray-700">Title</label>
               <input
                 type="text"
                 className="mt-1 block w-full rounded-lg border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                 placeholder="Patrol Meeting Title"
               />
             </div>
             <div className="grid grid-cols-2 gap-4">
               <div>
                 <label className="block text-sm font-medium text-gray-700">Date</label>
                 <input
                   type="date"
                   className="mt-1 block w-full rounded-lg border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                 />
               </div>
               <div>
                 <label className="block text-sm font-medium text-gray-700">Time</label>
                 <input
                   type="time"
                   className="mt-1 block w-full rounded-lg border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                 />
               </div>
             </div>
             <div>
               <label className="block text-sm font-medium text-gray-700">Location</label>
               <select className="mt-1 block w-full rounded-lg border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                 {MOCK_CRIME_DATA.hotspots.map((hotspot) => (
                   <option key={hotspot.id} value={hotspot.id}>
                     {hotspot.location}
                   </option>
                 ))}
               </select>
             </div>
             <div>
               <label className="block text-sm font-medium text-gray-700">Description</label>
               <textarea
                 rows={3}
                 className="mt-1 block w-full rounded-lg border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                 placeholder="Meeting agenda and details..."
               ></textarea>
             </div>
             <div className="flex justify-end gap-4 mt-6">
               <button
                 type="button"
                 onClick={() => setShowPatrolModal(false)}
                 className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
               >
                 Cancel
               </button>
               <button
                 type="submit"
                 className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
               >
                 Schedule Meeting
               </button>
             </div>
           </form>
         </motion.div>
       </div>
     )}
   </motion.div>
 );
};


export default CrimeMap;
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import {
 AlertTriangle,
 CheckCircle,
 Clock,
 TrendingUp,
 Brain,
 MapPin,
 FileText,
 Users,
 Search,
 Filter,
 Download,
 ChevronDown,
 ChevronUp
} from 'lucide-react';
import {
 BarChart,
 Bar,
 XAxis,
 YAxis,
 CartesianGrid,
 Tooltip,
 ResponsiveContainer,
 Line,
 PieChart,
 Pie,
 Cell,
 ComposedChart
} from 'recharts';


// Expanded Mock Data
const MOCK_CRIME_DATA = {
 monthly_stats: [
   { month: 'Jan', cases: 120, resolved: 85, unresolved: 35 },
   { month: 'Feb', cases: 145, resolved: 102, unresolved: 43 },
   { month: 'Mar', cases: 135, resolved: 95, unresolved: 40 },
   { month: 'Apr', cases: 160, resolved: 112, unresolved: 48 },
   { month: 'May', cases: 175, resolved: 125, unresolved: 50 },
   { month: 'Jun', cases: 190, resolved: 138, unresolved: 52 }
 ],
 crime_types: [
   { type: 'Theft', count: 45 },
   { type: 'Assault', count: 30 },
   { type: 'Cybercrime', count: 20 },
   { type: 'Fraud', count: 15 },
   { type: 'Others', count: 10 }
 ],
 hotspots: [
   { id: 1, location: 'Central Market', incidents: 35, risk: 'High' },
   { id: 2, location: 'Downtown Area', incidents: 28, risk: 'Medium' },
   { id: 3, location: 'Industrial Zone', incidents: 22, risk: 'Low' },
   { id: 4, location: 'University Campus', incidents: 18, risk: 'Medium' }
 ],
 recent_reports: [
   { id: 1, title: 'Robbery at Convenience Store', status: 'investigating', location: 'Main Street', timestamp: '2h ago' },
   { id: 2, title: 'Cyber Fraud Case', status: 'pending', location: 'Online', timestamp: '1d ago' },
   { id: 3, title: 'Vehicle Theft', status: 'resolved', location: 'Parking Lot', timestamp: '3d ago' },
   { id: 4, title: 'Assault Report', status: 'investigating', location: 'Downtown', timestamp: '12h ago' }
 ],
 demographic_data: [
   { category: '18-25', percentage: 25 },
   { category: '26-35', percentage: 35 },
   { category: '36-45', percentage: 20 },
   { category: '46-55', percentage: 12 },
   { category: '55+', percentage: 8 }
 ]
};


const COLORS = ['#4F46E5', '#10B981', '#F59E0B', '#EF4444', '#6366F1'];


const Dashboard: React.FC = () => {
 const [activeFilter, setActiveFilter] = useState('all');
 const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
 const [expandedCard, setExpandedCard] = useState<string | null>(null);


 const filterOptions = [
   { label: 'All', value: 'all' },
   { label: 'High Priority', value: 'high' },
   { label: 'Resolved', value: 'resolved' }
 ];


 const toggleCardExpand = (cardId: string) => {
   setExpandedCard(expandedCard === cardId ? null : cardId);
 };


 return (
   <div className="bg-gray-50 min-h-screen p-4 md:p-8">
     {/* Mobile Header */}
     <div className="md:hidden flex justify-between items-center mb-4">
       <h1 className="text-2xl font-bold text-gray-900">Crime Analytics</h1>
       <button
         onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
         className="p-2 rounded-lg bg-gray-200"
       >
         {isMobileMenuOpen ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
       </button>
     </div>


     {/* Mobile Menu */}
     {isMobileMenuOpen && (
       <motion.div
         initial={{ opacity: 0, height: 0 }}
         animate={{ opacity: 1, height: 'auto' }}
         exit={{ opacity: 0, height: 0 }}
         className="md:hidden bg-white rounded-lg shadow-md p-4 mb-4"
       >
         <div className="flex flex-col space-y-2">
           <button className="bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center justify-center space-x-2">
             <Download size={18} />
             <span>Export</span>
           </button>
           <button className="bg-gray-200 text-gray-800 px-4 py-2 rounded-lg flex items-center justify-center space-x-2">
             <Search size={18} />
             <span>Search</span>
           </button>
         </div>
       </motion.div>
     )}


     {/* Desktop Header */}
     <motion.div
       initial={{ opacity: 0, y: 20 }}
       animate={{ opacity: 1, y: 0 }}
       transition={{ duration: 0.5 }}
       className="hidden md:block mb-8"
     >
       <div className="flex justify-between items-center">
         <div>
           <h1 className="text-3xl md:text-4xl font-bold text-gray-900">Crime Analytics Dashboard</h1>
           <p className="mt-2 text-gray-600">Comprehensive Crime Insights and Predictive Analysis</p>
         </div>
         <div className="flex space-x-2 md:space-x-4">
           <button className="bg-blue-600 text-white px-3 py-2 md:px-4 md:py-2 rounded-lg flex items-center space-x-2 hover:bg-blue-700 transition text-sm md:text-base">
             <Download size={18} />
             <span className="hidden sm:inline">Export Report</span>
           </button>
           <button className="bg-gray-200 text-gray-800 px-3 py-2 md:px-4 md:py-2 rounded-lg flex items-center space-x-2 hover:bg-gray-300 transition text-sm md:text-base">
             <Search size={18} />
             <span className="hidden sm:inline">Advanced Search</span>
           </button>
         </div>
       </div>
     </motion.div>


     {/* Stats Cards - Mobile (Horizontal Scroll) */}
     <div className="md:hidden mb-4 overflow-x-auto pb-2">
       <div className="flex space-x-4 w-max">
         {[
           {
             id: 'active-cases',
             title: 'Active',
             value: '24',
             icon: Clock,
             color: 'bg-blue-500',
             trend: '+5%'
           },
           {
             id: 'resolved-cases',
             value: '156',
             icon: CheckCircle,
             color: 'bg-green-500',
             trend: '+12%'
           },
           {
             id: 'high-priority',
             value: '8',
             icon: AlertTriangle,
             color: 'bg-red-500',
             trend: '-2%'
           },
           {
             id: 'ai-accuracy',
             value: '89%',
             icon: Brain,
             color: 'bg-purple-500',
             trend: 'ML Model'
           },
         ].map((stat, index) => (
           <motion.div
             key={stat.id}
             initial={{ opacity: 0, y: 20 }}
             animate={{ opacity: 1, y: 0 }}
             transition={{ duration: 0.5, delay: index * 0.1 }}
             className="bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow p-4 min-w-[120px]"
             onClick={() => toggleCardExpand(stat.id)}
           >
             <div className="flex flex-col items-center">
               <div className={`${stat.color} p-2 rounded-lg mb-2`}>
                 <stat.icon className="text-white" size={18} />
               </div>
               <p className="text-sm text-gray-600 text-center">{stat.title || stat.id.split('-').join(' ')}</p>
               <p className="text-xl font-semibold text-gray-800">{stat.value}</p>
               <p className="text-xs text-gray-500">{stat.trend}</p>
             </div>
           </motion.div>
         ))}
       </div>
     </div>


     {/* Stats Cards - Desktop */}
     <div className="hidden md:grid grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-6 md:mb-8">
       {[
         {
           id: 'active-cases',
           title: 'Active Cases',
           value: '24',
           icon: Clock,
           color: 'bg-blue-500',
           trend: '+5% from last month'
         },
         {
           id: 'resolved-cases',
           title: 'Resolved Cases',
           value: '156',
           icon: CheckCircle,
           color: 'bg-green-500',
           trend: '+12% from last month'
         },
         {
           id: 'high-priority',
           title: 'High Priority',
           value: '8',
           icon: AlertTriangle,
           color: 'bg-red-500',
           trend: '-2% from last month'
         },
         {
           id: 'ai-accuracy',
           title: 'AI Prediction Accuracy',
           value: '89%',
           icon: Brain,
           color: 'bg-purple-500',
           trend: 'Machine Learning Model'
         },
       ].map((stat, index) => (
         <motion.div
           key={stat.id}
           initial={{ opacity: 0, y: 20 }}
           animate={{ opacity: 1, y: 0 }}
           transition={{ duration: 0.5, delay: index * 0.1 }}
           className="bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow p-4 md:p-6"
         >
           <div className="flex items-center justify-between">
             <div>
               <p className="text-sm text-gray-600">{stat.title}</p>
               <p className="mt-1 text-2xl md:text-3xl font-semibold text-gray-800">{stat.value}</p>
               <p className="mt-1 text-xs text-gray-500">{stat.trend}</p>
             </div>
             <div className={`${stat.color} p-3 rounded-lg`}>
               <stat.icon className="text-white" size={24} />
             </div>
           </div>
         </motion.div>
       ))}
     </div>


     {/* Main Charts - Mobile (Stacked) */}
     <div className="md:hidden space-y-4 mb-6">
       {/* Monthly Trends Card */}
       <motion.div
         initial={{ opacity: 0, y: 20 }}
         animate={{ opacity: 1, y: 0 }}
         transition={{ duration: 0.5, delay: 0.4 }}
         className="bg-white rounded-xl shadow-md p-4"
         onClick={() => toggleCardExpand('monthly-trends')}
       >
         <div className="flex justify-between items-center">
           <h2 className="text-md font-semibold text-gray-800">Monthly Trends</h2>
           {expandedCard === 'monthly-trends' ? <ChevronUp /> : <ChevronDown />}
         </div>
         {expandedCard === 'monthly-trends' && (
           <div className="mt-4 h-64">
             <ResponsiveContainer width="100%" height="100%">
               <ComposedChart data={MOCK_CRIME_DATA.monthly_stats}>
                 <CartesianGrid strokeDasharray="3 3" />
                 <XAxis dataKey="month" />
                 <YAxis />
                 <Tooltip />
                 <Bar dataKey="cases" fill="#4F46E5" name="Total Cases" />
               </ComposedChart>
             </ResponsiveContainer>
           </div>
         )}
       </motion.div>


       {/* Crime Types Card */}
       <motion.div
         initial={{ opacity: 0, y: 20 }}
         animate={{ opacity: 1, y: 0 }}
         transition={{ duration: 0.5, delay: 0.5 }}
         className="bg-white rounded-xl shadow-md p-4"
         onClick={() => toggleCardExpand('crime-types')}
       >
         <div className="flex justify-between items-center">
           <h2 className="text-md font-semibold text-gray-800">Crime Types</h2>
           {expandedCard === 'crime-types' ? <ChevronUp /> : <ChevronDown />}
         </div>
         {expandedCard === 'crime-types' && (
           <div className="mt-4 h-64">
             <ResponsiveContainer width="100%" height="100%">
               <PieChart>
                 <Pie
                   data={MOCK_CRIME_DATA.crime_types}
                   cx="50%"
                   cy="50%"
                   outerRadius={80}
                   fill="#8884d8"
                   dataKey="count"
                   nameKey="type"
                   label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                 >
                   {MOCK_CRIME_DATA.crime_types.map((entry, index) => (
                     <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                   ))}
                 </Pie>
                 <Tooltip />
               </PieChart>
             </ResponsiveContainer>
           </div>
         )}
       </motion.div>
     </div>


     {/* Main Charts - Desktop */}
     <div className="hidden md:grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
       <motion.div
         initial={{ opacity: 0, y: 20 }}
         animate={{ opacity: 1, y: 0 }}
         transition={{ duration: 0.5, delay: 0.4 }}
         className="bg-white rounded-xl shadow-md p-6"
       >
         <div className="flex justify-between items-center mb-4">
           <h2 className="text-lg font-semibold text-gray-800">Monthly Crime Trends</h2>
           <div className="flex space-x-2">
             {filterOptions.map((option) => (
               <button
              
                 key={option.value}
                 onClick={() => setActiveFilter(option.value)}
                 className={`px-3 py-1 rounded-full text-xs transition ${
                   activeFilter === option.value
                     ? 'bg-blue-600 text-white'
                     : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                 }`}
               >
                 {option.label}
               </button>
             ))}
           </div>
         </div>
         <div className="h-80">
           <ResponsiveContainer width="100%" height="100%">
             <ComposedChart data={MOCK_CRIME_DATA.monthly_stats}>
               <CartesianGrid strokeDasharray="3 3" />
               <XAxis dataKey="month" />
               <YAxis />
               <Tooltip />
               <Bar dataKey="cases" fill="#4F46E5" name="Total Cases" />
               <Line type="monotone" dataKey="resolved" stroke="#10B981" name="Resolved" />
               <Line type="monotone" dataKey="unresolved" stroke="#EF4444" name="Unresolved" />
             </ComposedChart>
           </ResponsiveContainer>
         </div>
       </motion.div>


       <motion.div
         initial={{ opacity: 0, y: 20 }}
         animate={{ opacity: 1, y: 0 }}
         transition={{ duration: 0.5, delay: 0.5 }}
         className="bg-white rounded-xl shadow-md p-6"
       >
         <h2 className="text-lg font-semibold mb-4 text-gray-800">Crime Type Distribution</h2>
         <div className="h-80 flex items-center">
           <ResponsiveContainer width="100%" height="100%">
             <PieChart>
               <Pie
                 data={MOCK_CRIME_DATA.crime_types}
                 cx="50%"
                 cy="50%"
                 labelLine={false}
                 outerRadius={120}
                 fill="#8884d8"
                 dataKey="count"
                 nameKey="type"
                 label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
               >
                 {MOCK_CRIME_DATA.crime_types.map((entry, index) => (
                   <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                 ))}
               </Pie>
               <Tooltip />
             </PieChart>
           </ResponsiveContainer>
         </div>
       </motion.div>
     </div>


     {/* Bottom Section - Mobile (Stacked) */}
     <div className="md:hidden space-y-4">
       {/* Hotspots Card */}
       <motion.div
         initial={{ opacity: 0, y: 20 }}
         animate={{ opacity: 1, y: 0 }}
         transition={{ duration: 0.5, delay: 0.6 }}
         className="bg-white rounded-xl shadow-md p-4"
         onClick={() => toggleCardExpand('hotspots')}
       >
         <div className="flex justify-between items-center">
           <h2 className="text-md font-semibold text-gray-800">Hotspots</h2>
           {expandedCard === 'hotspots' ? <ChevronUp /> : <ChevronDown />}
         </div>
         {expandedCard === 'hotspots' && (
           <div className="mt-4 space-y-3">
             {MOCK_CRIME_DATA.hotspots.map((hotspot) => (
               <div
                 key={hotspot.id}
                 className={`flex items-center justify-between p-3 rounded-lg ${
                   hotspot.risk === 'High' ? 'bg-red-50 border-l-4 border-red-500' :
                   hotspot.risk === 'Medium' ? 'bg-yellow-50 border-l-4 border-yellow-500' :
                   'bg-green-50 border-l-4 border-green-500'
                 }`}
               >
                 <div>
                   <p className="font-medium text-sm text-gray-800">{hotspot.location}</p>
                   <p className="text-xs text-gray-600">{hotspot.incidents} incidents</p>
                 </div>
                 <div className={`text-sm font-semibold ${
                   hotspot.risk === 'High' ? 'text-red-600' :
                   hotspot.risk === 'Medium' ? 'text-yellow-600' :
                   'text-green-600'
                 }`}>
                   {hotspot.risk}
                 </div>
               </div>
             ))}
           </div>
         )}
       </motion.div>


       {/* Reports Card */}
       <motion.div
         initial={{ opacity: 0, y: 20 }}
         animate={{ opacity: 1, y: 0 }}
         transition={{ duration: 0.5, delay: 0.7 }}
         className="bg-white rounded-xl shadow-md p-4"
         onClick={() => toggleCardExpand('reports')}
       >
         <div className="flex justify-between items-center">
           <h2 className="text-md font-semibold text-gray-800">Recent Reports</h2>
           {expandedCard === 'reports' ? <ChevronUp /> : <ChevronDown />}
         </div>
         {expandedCard === 'reports' && (
           <div className="mt-4 space-y-3">
             {MOCK_CRIME_DATA.recent_reports.map((report) => (
               <div
                 key={report.id}
                 className="p-3 bg-gray-50 rounded-lg"
               >
                 <div className="flex items-center justify-between">
                   <p className="font-medium text-sm text-gray-800">{report.title}</p>
                   <span className={`px-2 py-1 rounded text-xs font-medium ${
                     report.status === 'resolved' ? 'bg-green-100 text-green-800' :
                     report.status === 'investigating' ? 'bg-blue-100 text-blue-800' :
                     'bg-yellow-100 text-yellow-800'
                   }`}>
                     {report.status}
                   </span>
                 </div>
                 <div className="flex justify-between mt-1">
                   <p className="text-xs text-gray-600">{report.location}</p>
                   <p className="text-xs text-gray-500">{report.timestamp}</p>
                 </div>
               </div>
             ))}
           </div>
         )}
       </motion.div>


       {/* Demographics Card */}
       <motion.div
         initial={{ opacity: 0, y: 20 }}
         animate={{ opacity: 1, y: 0 }}
         transition={{ duration: 0.5, delay: 0.8 }}
         className="bg-white rounded-xl shadow-md p-4"
         onClick={() => toggleCardExpand('demographics')}
       >
         <div className="flex justify-between items-center">
           <h2 className="text-md font-semibold text-gray-800">Demographics</h2>
           {expandedCard === 'demographics' ? <ChevronUp /> : <ChevronDown />}
         </div>
         {expandedCard === 'demographics' && (
           <div className="mt-4 h-64">
             <ResponsiveContainer width="100%" height="100%">
               <BarChart data={MOCK_CRIME_DATA.demographic_data}>
                 <CartesianGrid strokeDasharray="3 3" vertical={false} />
                 <XAxis dataKey="category" />
                 <YAxis />
                 <Tooltip />
                 <Bar dataKey="percentage" fill="#6366F1" />
               </BarChart>
             </ResponsiveContainer>
           </div>
         )}
       </motion.div>
     </div>


     {/* Bottom Section - Desktop */}
     <div className="hidden md:grid grid-cols-1 lg:grid-cols-3 gap-6">
       <motion.div
         initial={{ opacity: 0, y: 20 }}
         animate={{ opacity: 1, y: 0 }}
         transition={{ duration: 0.5, delay: 0.6 }}
         className="bg-white rounded-xl shadow-md p-6"
       >
         <div className="flex items-center justify-between mb-4">
           <h2 className="text-lg font-semibold text-gray-800">Crime Hotspots</h2>
           <MapPin className="text-gray-400" size={20} />
         </div>
         <div className="space-y-4">
           {MOCK_CRIME_DATA.hotspots.map((hotspot) => (
             <div
               key={hotspot.id}
               className={`flex items-center justify-between p-3 rounded-lg transition
                 ${hotspot.risk === 'High' ? 'bg-red-50 border-l-4 border-red-500' :
                    hotspot.risk === 'Medium' ? 'bg-yellow-50 border-l-4 border-yellow-500' :
                    'bg-green-50 border-l-4 border-green-500'}`}
             >
               <div>
                 <p className="font-medium text-gray-800">{hotspot.location}</p>
                 <p className="text-sm text-gray-600">{hotspot.incidents} incidents</p>
               </div>
               <div className={`font-semibold ${
                 hotspot.risk === 'High' ? 'text-red-600' :
                 hotspot.risk === 'Medium' ? 'text-yellow-600' :
                 'text-green-600'
               }`}>
                 {hotspot.risk} Risk
               </div>
             </div>
           ))}
         </div>
       </motion.div>


       <motion.div
         initial={{ opacity: 0, y: 20 }}
         animate={{ opacity: 1, y: 0 }}
         transition={{ duration: 0.5, delay: 0.7 }}
         className="bg-white rounded-xl shadow-md p-6"
       >
         <div className="flex items-center justify-between mb-4">
           <h2 className="text-lg font-semibold text-gray-800">Recent Incident Reports</h2>
           <FileText className="text-gray-400" size={20} />
         </div>
         <div className="space-y-4">
           {MOCK_CRIME_DATA.recent_reports.map((report) => (
             <div
               key={report.id}
               className="p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition"
             >
               <div className="flex items-center justify-between">
                 <p className="font-medium text-gray-800">{report.title}</p>
                 <span className={`px-2 py-1 rounded text-xs font-medium ${
                   report.status === 'resolved' ? 'bg-green-100 text-green-800' :
                   report.status === 'investigating' ? 'bg-blue-100 text-blue-800' :
                   'bg-yellow-100 text-yellow-800'
                 }`}>
                   {report.status}
                 </span>
               </div>
               <div className="flex justify-between mt-1">
                 <p className="text-sm text-gray-600">{report.location}</p>
                 <p className="text-xs text-gray-500">{report.timestamp}</p>
               </div>
             </div>
           ))}
         </div>
       </motion.div>


       <motion.div
         initial={{ opacity: 0, y: 20 }}
         animate={{ opacity: 1, y: 0 }}
         transition={{ duration: 0.5, delay: 0.8 }}
         className="bg-white rounded-xl shadow-md p-6"
       >
         <div className="flex items-center justify-between mb-4">
           <h2 className="text-lg font-semibold text-gray-800">Demographic Insights</h2>
           <Users className="text-gray-400" size={20} />
         </div>
         <div className="h-64">
           <ResponsiveContainer width="100%" height="100%">
             <BarChart data={MOCK_CRIME_DATA.demographic_data}>
               <CartesianGrid strokeDasharray="3 3" vertical={false} />
               <XAxis dataKey="category" />
               <YAxis label={{ value: 'Percentage', angle: -90, position: 'insideLeft' }} />
               <Tooltip />
               <Bar dataKey="percentage" fill="#6366F1" />
             </BarChart>
           </ResponsiveContainer>
         </div>
         <div className="mt-4 text-center">
           <p className="text-sm text-gray-600">Age Group Distribution of Crime Incidents</p>
         </div>
       </motion.div>
     </div>
   </div>
 );
};


export default Dashboard;
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Shield, User, Lock, AlertCircle, Map, Star, ChevronRight, Key } from 'lucide-react';
import { useAuth } from '../context/AuthContext';


const Login: React.FC = () => {
 const [email, setEmail] = useState('');
 const [password, setPassword] = useState('');
 const [error, setError] = useState('');
 const [isLoading, setIsLoading] = useState(false);
 const { login } = useAuth();


 // Animation state
 const [, setAnimationComplete] = useState(false);


 useEffect(() => {
   // Set animation as complete after initial load
   const timer = setTimeout(() => setAnimationComplete(true), 1500);
   return () => clearTimeout(timer);
 }, []);


 const handleSubmit = async (e: React.FormEvent) => {
   e.preventDefault();
   setError('');
   setIsLoading(true);
  
   try {
     const success = await login(email, password);
     if (!success) {
       setError('Invalid email or password');
     }
   } catch (err) {
     setError('An error occurred during login');
   } finally {
     setIsLoading(false);
   }
 };


 return (
   <div className="min-h-screen relative overflow-hidden bg-gradient-to-br from-blue-950 via-indigo-900 to-purple-950">
     {/* Animated background elements */}
     <div className="absolute inset-0 overflow-hidden">
       <motion.div
         initial={{ opacity: 0 }}
         animate={{ opacity: 0.3 }}
         className="absolute inset-0"
       >
         {/* Police-themed pattern overlay */}
         <svg className="w-full h-full opacity-10" xmlns="http://www.w3.org/2000/svg">
           <pattern id="policePattern" x="0" y="0" width="40" height="40" patternUnits="userSpaceOnUse">
             <path d="M0 0L40 0L40 40L0 40Z" fill="none" stroke="rgba(255,255,255,0.2)" strokeWidth="0.5" />
             <path d="M20 20L25 15L20 10L15 15Z" fill="rgba(255,255,255,0.1)" />
           </pattern>
           <rect x="0" y="0" width="100%" height="100%" fill="url(#policePattern)" />
         </svg>
       </motion.div>


       {/* Animated rings */}
       {[...Array(3)].map((_, i) => (
         <motion.div
           key={i}
           className="absolute top-1/2 left-1/2 rounded-full border border-indigo-500/20"
           initial={{ width: 0, height: 0, x: "-50%", y: "-50%", opacity: 0 }}
           animate={{
             width: [0, 1000 + i * 200],
             height: [0, 1000 + i * 200],
             opacity: [0, 0.2, 0]
           }}
           transition={{
             duration: 10,
             delay: i * 2,
             repeat: Infinity,
             ease: "easeOut"
           }}
         />
       ))}
      
       {/* Floating particles */}
       {[...Array(10)].map((_, i) => (
         <motion.div
           key={`particle-${i}`}
           className="absolute w-2 h-2 rounded-full bg-blue-400/30 blur-sm"
           initial={{
             x: Math.random() * window.innerWidth,
             y: Math.random() * window.innerHeight,
             opacity: 0
           }}
           animate={{
             x: Math.random() * window.innerWidth,
             y: Math.random() * window.innerHeight,
             opacity: [0, 0.8, 0]
           }}
           transition={{
             duration: 15 + Math.random() * 10,
             repeat: Infinity,
             repeatType: "reverse"
           }}
         />
       ))}
     </div>


     <div className="relative z-10 min-h-screen flex flex-col items-center justify-center p-4 sm:p-6">
       {/* Header shield animation */}
       <motion.div
         initial={{ y: -100, opacity: 0 }}
         animate={{ y: 0, opacity: 1 }}
         transition={{ duration: 0.7, ease: "easeOut" }}
         className="absolute top-8 left-0 right-0 flex justify-center"
       >
         <div className="flex items-center bg-white/10 backdrop-blur-md px-4 py-2 rounded-full shadow-lg">
           <Shield className="text-blue-400 mr-2" size={18} />
           <span className="text-white text-sm font-medium">Thoothukudi Police Department</span>
         </div>
       </motion.div>


       {/* Main card */}
       <motion.div
         initial={{ opacity: 0, y: 20, scale: 0.95 }}
         animate={{ opacity: 1, y: 0, scale: 1 }}
         transition={{ duration: 0.5, delay: 0.2 }}
         className="bg-white/95 backdrop-blur-lg rounded-3xl shadow-2xl p-6 sm:p-8 w-full max-w-md border border-white/20 overflow-hidden"
       >
         {/* Logo/Badge */}
         <motion.div
           className="text-center mb-8 relative"
           initial={{ scale: 0.9 }}
           animate={{ scale: 1 }}
           transition={{ duration: 0.5, delay: 0.4 }}
         >
           <div className="relative mx-auto w-24 h-24 flex items-center justify-center">
             {/* Rotating glow effect */}
             <motion.div
               animate={{
                 rotate: 360,
                 transition: { duration: 20, repeat: Infinity, ease: "linear" }
               }}
               className="absolute inset-0 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 opacity-30 blur-xl"
             />
            
             {/* Badge background */}
             <motion.div
               initial={{ rotateY: 90 }}
               animate={{ rotateY: 0 }}
               transition={{ duration: 0.7, delay: 0.6 }}
               className="relative w-20 h-20 bg-gradient-to-br from-blue-700 to-indigo-800 rounded-full flex items-center justify-center shadow-lg"
             >
               {/* Badge design */}
               <div className="absolute inset-0 rounded-full border-4 border-blue-200/30 overflow-hidden">
                 <div className="absolute inset-0 bg-gradient-to-br from-blue-900/50 to-indigo-900/50" />
                 <div className="absolute inset-2 rounded-full border border-blue-300/30" />
               </div>
               <motion.div
                 initial={{ scale: 0 }}
                 animate={{ scale: 1 }}
                 transition={{ type: "spring", delay: 1 }}
               >
                 <Shield className="text-white relative z-10" size={36} />
                 <Star className="absolute top-1/4 left-1/2 transform -translate-x-1/2 text-yellow-300" size={14} />
               </motion.div>
             </motion.div>
           </div>
          
           {/* Title with 3D-like text effect */}
           <div className="relative mt-4">
             <motion.h2
               initial={{ opacity: 0 }}
               animate={{ opacity: 1 }}
               transition={{ delay: 0.8 }}
               className="text-3xl font-bold bg-gradient-to-r from-blue-700 via-indigo-600 to-blue-700 bg-clip-text text-transparent relative z-10"
             >
               CrimeSpot Thoothukudi Police
             </motion.h2>
             <motion.div
               initial={{ width: 0 }}
               animate={{ width: "100%" }}
               transition={{ delay: 1.2, duration: 0.8 }}
               className="h-1 bg-gradient-to-r from-transparent via-blue-500 to-transparent absolute bottom-0 left-0"
             />
           </div>
          
           {/* Digital badge effect */}
           <motion.div
             initial={{ opacity: 0 }}
             animate={{ opacity: 1 }}
             transition={{ delay: 1.4 }}
             className="mt-2 flex justify-center"
           >
             <div className="flex items-center bg-blue-50 px-3 py-1 rounded-full border border-blue-100">
               <Map size={14} className="text-blue-600 mr-1" />
               {/* <span className="text-sm font-medium text-blue-800">Secure Portal</span> */}
             </div>
           </motion.div>
         </motion.div>


         {/* Error message */}
         <AnimatePresence>
           {error && (
             <motion.div
               initial={{ opacity: 0, y: -10, height: 0 }}
               animate={{ opacity: 1, y: 0, height: "auto" }}
               exit={{ opacity: 0, height: 0 }}
               className="mb-6 p-3 bg-red-50 text-red-700 rounded-lg flex items-center gap-2 overflow-hidden"
             >
               <AlertCircle size={20} />
               <span>{error}</span>
             </motion.div>
           )}
         </AnimatePresence>


         {/* Login form with enhanced animations */}
         <form onSubmit={handleSubmit} className="space-y-5">
           {/* Email field */}
           <motion.div
             initial={{ x: -20, opacity: 0 }}
             animate={{ x: 0, opacity: 1 }}
             transition={{ delay: 0.5 }}
           >
             <label className="block text-sm font-medium text-gray-700 mb-1 ml-1 flex items-center">
               <User size={14} className="mr-1 text-blue-500" />
               Email
             </label>
             <div className="relative group">
               {/* Enhanced gradient border effect */}
               <div className="absolute inset-0 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg opacity-25 group-hover:opacity-100 blur transition duration-200" />
               <div className="relative bg-white rounded-lg">
                 <User className="absolute left-3 top-3 text-gray-400 group-hover:text-blue-500 transition-colors" size={20} />
                 <input
                   type="email"
                   value={email}
                   onChange={(e) => setEmail(e.target.value)}
                   className="pl-10 block w-full rounded-lg border border-gray-300 px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all"
                   placeholder="Enter your email"
                 />
               </div>
             </div>
           </motion.div>


           {/* Password field */}
           <motion.div
             initial={{ x: -20, opacity: 0 }}
             animate={{ x: 0, opacity: 1 }}
             transition={{ delay: 0.6 }}
           >
             <label className="block text-sm font-medium text-gray-700 mb-1 ml-1 flex items-center">
               <Key size={14} className="mr-1 text-blue-500" />
               Password
             </label>
             <div className="relative group">
               <div className="absolute inset-0 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg opacity-25 group-hover:opacity-100 blur transition duration-200" />
               <div className="relative bg-white rounded-lg">
                 <Lock className="absolute left-3 top-3 text-gray-400 group-hover:text-blue-500 transition-colors" size={20} />
                 <input
                   type="password"
                   value={password}
                   onChange={(e) => setPassword(e.target.value)}
                   className="pl-10 block w-full rounded-lg border border-gray-300 px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all"
                   placeholder="Enter your password"
                 />
               </div>
             </div>
           </motion.div>


           {/* Submit button with loading state */}
           <motion.div
             initial={{ y: 20, opacity: 0 }}
             animate={{ y: 0, opacity: 1 }}
             transition={{ delay: 0.7 }}
             className="pt-2"
           >
             <button
               type="submit"
               disabled={isLoading}
               className="w-full bg-gradient-to-r from-blue-600 via-indigo-600 to-blue-600 text-white py-3 px-4 rounded-lg hover:from-blue-700 hover:to-indigo-700 transition duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1 font-medium relative overflow-hidden group"
             >
               {isLoading ? (
                 <div className="flex items-center justify-center">
                   <motion.div
                     animate={{ rotate: 360 }}
                     transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                     className="w-5 h-5 border-2 border-white border-t-transparent rounded-full mr-2"
                   />
                   <span>Signing in...</span>
                 </div>
               ) : (
                 <div className="flex items-center justify-center">
                   <span>Sign In</span>
                   <ChevronRight size={18} className="ml-1 transform group-hover:translate-x-1 transition-transform" />
                 </div>
               )}
              
               {/* Button hover effect */}
               <motion.div
                 className="absolute bottom-0 left-0 h-1 bg-white/40"
                 initial={{ width: 0 }}
                 whileHover={{ width: "100%" }}
                 transition={{ duration: 0.3 }}
               />
             </button>
           </motion.div>
         </form>


         {/* Demo credentials with card effect */}
         <motion.div
           initial={{ opacity: 0, y: 20 }}
           animate={{ opacity: 1, y: 0 }}
           transition={{ delay: 0.8 }}
           className="mt-8"
         >
           <p className="text-center text-sm font-medium text-gray-600 mb-2 flex items-center justify-center">
             <Lock size={14} className="mr-1 text-blue-500" />
             Demo Credentials
           </p>
           <div className="relative">
             {/* Card shine effect */}
             <motion.div
               className="absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-0"
               animate={{
                 x: ["calc(-100%)", "calc(100%)"],
                 opacity: [0, 0.5, 0],
               }}
               transition={{
                 duration: 1.5,
                 repeat: Infinity,
                 repeatDelay: 5,
               }}
             />
            
             <div className="bg-gradient-to-br from-gray-50 to-white p-4 rounded-xl border border-gray-200 shadow-sm relative overflow-hidden">
               <div className="flex flex-col sm:flex-row sm:justify-around space-y-2 sm:space-y-0">
                 <div className="flex items-center gap-2">
                   <div className="w-6 h-6 rounded-full bg-blue-100 flex items-center justify-center">
                     <User size={14} className="text-blue-500" />
                   </div>
                   <p className="text-sm">Admin: admin@gmail.com / 12345</p>
                 </div>
                 <div className="flex items-center gap-2">
                   <div className="w-6 h-6 rounded-full bg-indigo-100 flex items-center justify-center">
                     <User size={14} className="text-indigo-500" />
                   </div>
                   <p className="text-sm">User: user@gmail.com / 12345</p>
                 </div>
               </div>
             </div>
           </div>
         </motion.div>
        
         {/* Footer with scanner line effect */}
         <motion.div
           initial={{ opacity: 0 }}
           animate={{ opacity: 1 }}
           transition={{ delay: 1 }}
           className="mt-8 pt-4 border-t border-gray-100 text-center relative"
         >
           <motion.div
             className="absolute top-0 left-0 h-px bg-gradient-to-r from-transparent via-blue-500 to-transparent w-full"
             animate={{
               opacity: [0, 1, 0],
               scaleY: [1, 2, 1],
             }}
             transition={{ duration: 2, repeat: Infinity, repeatDelay: 3 }}
           />
           <p className="text-xs text-gray-400 flex items-center justify-center">
             <Shield size={12} className="text-blue-400 mr-1" />
               Police Department • Secure Login
           </p>
         </motion.div>
       </motion.div>
     </div>
   </div>
 );
};


export default Login;
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Search, MapPin, Phone, Mail, User, Award } from 'lucide-react';


const Officers: React.FC = () => {
const [searchTerm, setSearchTerm] = useState('');
const [selectedDivision, setSelectedDivision] = useState('All');


const divisions = [
'All',
'Head Officers',
'Thoothukudi',
'Thoothukudi Rural',
'Maniyachi',
'Kovilpatti',
'Vilathikulam',
'Srivaikundam',
'Thiruchendur',
'Sattankulam',
'PEW',
'DCB',
];


const officersData = [
   {
   division: 'Head Officers',
   name: 'Thiru Albert John IPS',
   designation: 'SUPERINTENDENT OF POLICE - SP',
   landline: '0461-2330111, 0461-2340200',
   mobile: '9876543210',
   email: 'spthoothukudicamp@gmail.com',
   },
   {
   division: 'Head Officers',
   name: 'Thiru Dheepu V K',
   designation: 'ADDITIONAL SUPERINTENDENT OF POLICE - ADSP',
   landline: '04612340300',
   mobile: '9498194825',
   email: 'adspcwctut@gmail.com',
   },
   {
   division: 'Head Officers',
   name: 'Thiru Arumugam N',
   designation: 'ADDITIONAL SUPERINTENDENT OF POLICE - ADSP',
   landline: '04612340300',
   mobile: '9442317751',
   email: 'adsphqtut@gmail.com',
   },
   {
   division: 'Head Officers',
   name: 'Thiru Sahaya Jose',
   designation: 'ADDITIONAL SUPERINTENDENT OF POLICE - ADSP',
   landline: '0461-2330111, 0461-2340200',
   mobile: '9498102858',
   email: 'test@gmail.com',
   },
   {
   division: 'Kovilpatti',
   name: 'Thiru Jaganathan',
   designation: 'DEPUTY SUPERINTENDENT OF POLICE - DSP',
   landline: '04632-220020, 9498101835',
   mobile: '9865695944',
   email: 'dspkvptut@gmail.com',
   },
   {
   division: 'Maniyachi',
   name: 'Thiru Arul',
   designation: 'DEPUTY SUPERINTENDENT OF POLICE - DSP',
   landline: '0461-2273252, 9498101836',
   mobile: '9498176611',
   email: 'dspmintut@yahoo.co.in',
   },
   {
   division: 'Sattankulam',
   name: 'Thiru Subakumar',
   designation: 'DEPUTY SUPERINTENDENT OF POLICE - DSP',
   landline: '04639-266665, 9498101838',
   mobile: '9498183830',
   email: 'dspskm@yahoo.in',
   },
   {
   division: 'Srivaikundam',
   name: 'Thiru Ramakrishnan',
   designation: 'DEPUTY SUPERINTENDENT OF POLICE - DSP',
   landline: '04630-255236, 9498101834',
   mobile: '9442587777',
   email: 'dspsrivai@yahoo.com',
   },
   {
   division: 'Thiruchendur',
   name: 'Thiru Maheshkumar M',
   designation: 'DEPUTY SUPERINTENDENT OF POLICE - DSP',
   landline: '046390-245100, 9498101833',
   mobile: '7708467248',
   email: 'dsptcr1@gmail.com',
   },
   {
   division: 'Thoothukudi Rural',
   name: 'Thiru Sudheer',
   designation: 'DEPUTY SUPERINTENDENT OF POLICE - DSP',
   landline: '0461-2376093, 9498101832',
   mobile: '9688663177',
   email: 'dsptutrural@gmail.com',
   },
   {
   division: 'Vilathikulam',
   name: 'Thiru Asokan P',
   designation: 'DEPUTY SUPERINTENDENT OF POLICE - DSP',
   landline: '04638-233498, 9498101837',
   mobile: '8072667032',
   email: 'dspvkmtut26@gmail.com',
   },
   {
   division: 'Thoothukudi Rural',
   name: 'Thiru Dr. C. Madhan IPS',
   designation: 'DEPUTY SUPERINTENDENT OF POLICE - DSP',
   landline: '0461-23752150, 9498101831',
   mobile: '6381214836',
   email: 'dsptutrural@gmail.com',
   },
   {
   division: 'PEW',
   name: 'Thiru Guruvenkatraj V',
   designation: 'DEPUTY SUPERINTENDENT OF POLICE - DSP',
   landline: '0461-2311000',
   mobile: '9498198131',
   email: 'dsppewtut@gmail.com',
   },
   {
   division: 'DCB',
   name: 'Thiru Raju. S',
   designation: 'DEPUTY SUPERINTENDENT OF POLICE - DSP',
   landline: '04612340585',
   mobile: '9498107588',
   email: 'dspdcbtut@yahoo.co.in',
   },
   {
   division: 'Thoothukudi',
   station: 'Muthiahpuram',
   name: 'Vacant',
   landline: '0461-2355311, 9498101859',
   mobile: '-',
   email: 'muthiahpuramps@gmail.com',
   },
   {
   division: 'Thoothukudi',
   station: 'Thoothukudi Central',
   name: 'Basakaran G',
   landline: '0461-2321400, 9498101883',
   mobile: '9498193727',
   email: 'tutcentralps@gmail.com',
   },
   {
   division: 'Thoothukudi',
   station: 'Thoothukudi North',
   name: 'Balamurugan V',
   landline: '0461-2320051, 9498101884',
   mobile: '9498163108',
   email: 'b1thoothukudi@gmail.com',
   },
   {
   division: 'Thoothukudi',
   station: 'Thoothukudi South',
   name: 'Thirumurugan',
   landline: '0461-2321850, 9498101885',
   mobile: '9498193830',
   email: 'thoothukudisouthps@gmail.com',
   },
   {
   division: 'Thoothukudi',
   station: 'Thermal Nagar',
   name: 'Shoba Jency A',
   landline: '0461-2352721, 9498101882',
   mobile: '9442302669',
   email: 'thermalnagar@gmail.com',
   },
   {
   division: 'Thoothukudi',
   station: 'Awps-thoothukudi',
   name: 'Ramalakshmi A',
   landline: '0461-2337999, 9498101888',
   mobile: '9498184578',
   email: 'awpstut2337999@gmail.com',
   },
   {
   division: 'Thoothukudi',
   station: 'Thazhamuthunagar',
   name: 'Jeyanthi',
   landline: '0461-2360370, 9498101878',
   mobile: '9498197004',
   email: 'thalamuthunagar@gmail.com',
   },
   {
   division: 'Thoothukudi Rural',
   station: 'Murappanadu',
   name: 'Sheik Abdhul Kadhar',
   landline: '04630-261229, 9498101858',
   mobile: '9498143651',
   email: 'murappanadups@gmail.com',
   },
   {
   division: 'Thoothukudi Rural',
   station: 'Pudukkottai',
   name: 'Murugan',
   landline: '0461-2271230, 9498101866',
   mobile: '9498193270',
   email: 'pudukottaips@gmail.com',
   },
   {
   division: 'Thoothukudi Rural',
   station: 'Sipcot',
   name: 'Syrus',
   landline: '0461-2341472, 9498101874',
   mobile: '9498194200',
   email: 'sipcotpolicestation@gmail.com',
   },
   {
   division: 'Thoothukudi Rural',
   station: 'Thattaparai',
   name: 'Kumaresan N',
   landline: '0461-2261240, 9498101881',
   mobile: '9498194689',
   email: 'sic3ps@gmail.com',
   },
   {
   division: 'Thoothukudi Rural',
   station: 'Puthiamputhur',
   name: 'Jesline',
   landline: '0461-2261214, 9498101865',
   mobile: '9498108579',
   email: 'puthiamputhurps@gmail.com',
   },
   {
   division: 'Maniyachi',
   station: 'Maniyachi',
   name: 'Thomas',
   landline: '0461-2268226, 9498101855',
   mobile: '-',
   email: 'maniyachi@gmail.com',
   },
   {
   division: 'Maniyachi',
   station: 'Ottapidaram',
   name: 'Pavul Yesu Dhasan I',
   landline: '0461-2366238, 9498101863',
   mobile: '9498106349',
   email: 'insopmtut@yahoo.in',
   },
   {
   division: 'Maniyachi',
   station: 'Pasuvanthanai',
   name: 'Ramachandran U',
   landline: '0461-262225, 9498101864',
   mobile: '9498107732',
   email: 'h5pasuvanthanipstut@yahoo.com',
   },
   {
   division: 'Maniyachi',
   station: 'Kadambur',
   name: 'Kavitha',
   landline: '04632-246231, 9498101846',
   mobile: '9442853239',
   email: 'kadamburps@yahoo.com',
   },
   {
   division: 'Maniyachi',
   station: 'Puliyampatti',
   name: 'Ramesh Mohan R',
   landline: '0461-2273217, 9498101868',
   mobile: '9498192414',
   email: 'h2puliyampatti@gmail.com',
   },
   {
   division: 'Maniyachi',
   station: 'Naraikinaru',
   name: 'Rajadeva Prasath',
   landline: '0461-2273292, 9498101861',
   mobile: '9486919766',
   email: 'naraikinarups1997@gmail.com',
   },
   {
   division: 'Kovilpatti',
   station: 'Kovilpatti East',
   name: 'Jinna Beer Mohammed',
   landline: '04632-220050, 9498101850',
   mobile: '9498197572',
   email: 'kovilpattieastps2023@gmail.com',
   },
   {
   division: 'Kovilpatti',
   station: 'Kovilpatti West',
   name: 'Navaneethakrishnan K',
   landline: '04632-220048, 9498101851',
   mobile: '9498184748',
   email: 'kovilpattiwestps@gmail.com',
   },
   {
   division: 'Kovilpatti',
   station: 'Kalugumalai',
   name: 'Padmavathi S',
   landline: '04632-251201, 9498101847',
   mobile: '9498184217',
   email: 'kalugumalaips1872@yahoo.in',
   },
   {
   division: 'Kovilpatti',
   station: 'Kayathar',
   name: 'Sukadevi',
   landline: '04632-261232, 9498101848',
   mobile: '9498195599',
   email: 'kayatharps@gmail.com',
   },
   {
   division: 'Kovilpatti',
   station: 'Nalattinpudur',
   name: 'Arul Samraj D',
   landline: '04632-248740, 9498101860',
   mobile: '9498195739',
   email: 'nalattin@gmail.com',
   },
   {
   division: 'Vilathikulam',
   station: 'Vilathikulam',
   name: 'Sakthivel A',
   landline: '04638-233125, 9498101887',
   mobile: '9498153052',
   email: 'vilathikulamps123@gmail.com',
   },
   {
   division: 'Vilathikulam',
   station: 'Soorankudi',
   name: 'Siluvai Anthony R',
   landline: '04638-262300, 9498101875',
   mobile: '7418515734',
   email: 'soorankudips@gmail.com',
   },
   {
   division: 'Vilathikulam',
   station: 'Pudur',
   name: 'Sundaram',
   landline: '04638-252240, 9498101867',
   mobile: '9600833686',
   email: 'pudurv3ps@gmail.com',
   },
   {
   division: 'Vilathikulam',
   station: 'Sankaralingapuram',
   name: 'Murugesan',
   landline: '04638-242040, 9498101869',
   mobile: '9976655021',
   email: 'sankaipsv10@gmail.com',
   },
   {
   division: 'Vilathikulam',
   station: 'Kadalkudi',
   name: 'Vinayagam',
   landline: '04638-291101, 9498101845',
   mobile: '9498195890',
   email: 'kadalkuduv4ps@gmail.com',
   },
   {
   division: 'Vilathikulam',
   station: 'Ettayapuram',
   name: 'Sundaramoorthy',
   landline: '04632-271201, 9498101844',
   mobile: '9498136507',
   email: 'ettayapurampsvkmtut@gmail.com',
   },
   {
   division: 'Srivaikundam',
   station: 'Alwarthirunagiri',
   name: 'Stellabai S',
   landline: '9498101839',
   mobile: '9498194380',
   email: 'shoalwar@gmail.com',
   },
   {
   division: 'Srivaikundam',
   station: 'Seidunganallur',
   name: 'Jeenkumar P',
   landline: '9498101872',
   mobile: '9498107695',
   email: 'inss2ps@gmail.com',
   },
   {
   division: 'Srivaikundam',
   station: 'Srivaikundam',
   name: 'Padmanaba Pillai',
   landline: '9498101876',
   mobile: '9444176622',
   email: 'srivaips@gmail.com',
   },
   {
   division: 'Srivaikundam',
   station: 'Kurumbur',
   name: 'Sivaraja',
   landline: '04639-235100, 9498101854',
   mobile: '9498104834',
   email: 'kurumburps@gmail.com',
   },
   {
   division: 'Srivaikundam',
   station: 'Sayarpuram',
   name: 'Antony Soosai Raj G',
   landline: '04630-273340, 9498101871',
   mobile: '9442138301',
   email: 'Sisawyer.ps@gmail.com',
   },
   {
   division: 'Thiruchendur',
   station: 'Kulasekarapattinam',
   name: 'Kannan M',
   landline: '04639-250286, 9498101852',
   mobile: '9498184054',
   email: 'f5kulasaips@gmail.com',
   },
   {
   division: 'Thiruchendur',
   station: 'Thiruchendur',
   name: 'Innosekumar P',
   landline: '04639-242241, 9498101886',
   mobile: '9498107695',
   email: 'tiruchendurp.s@gmail.com',
   },
   {
   division: 'Thiruchendur',
   station: 'Athoor',
   name: 'Mariappan',
   landline: '04639-238411, 9498101841',
   mobile: '8903546426',
   email: 'authoorps@gmail.com',
   },
   {
   division: 'Sattankulam',
   station: 'Meignanapuram',
   name: 'Shanmugaraj',
   landline: '04639-227233, 9498101857',
   mobile: '7678264387',
   email: 'megpsmegps220@gmail.com',
   },
   {
   division: 'Sattankulam',
   station: 'Nazareth',
   name: 'Gangainathapandiyan S',
   landline: '04639-277233, 9498101862',
   mobile: '8148200200',
   email: 'insprnaz@gmail.com',
   },
   {
   division: 'Sattankulam',
   station: 'Thattarmadam',
   name: 'Anitha M',
   landline: '04639-253244',
   mobile: '9498197517',
   email: 'tuttdmps@gmail.com',
   },
   {
   division: 'PEW',
   station: 'Pew-kovilpatti',
   name: 'Meeha R',
   landline: '04632-221247',
   mobile: '9498103021',
   email: 'kovilpatti.pew2023@gmail.com',
   },
   {
   division: 'DCB',
   station: 'Dcb',
   name: 'Lakshmi Prabha',
   landline: '0461-2340585',
   mobile: '9443507258',
   email: 'dspdcbtut@gmail.com',
   },
   ];


const officers = officersData.map((officer) => ({
...officer,
name: officer.name || 'N/A',
designation: officer.designation || null,
landline: officer.landline || 'N/A',
mobile: officer.mobile || 'N/A',
email: officer.email || 'N/A',
isIPS: officer.name.includes('IPS'),
isHeadOfficer: officer.division === 'Head Officers'
}));


const filteredOfficers = officers.filter((officer) => {
const matchesDivision =
selectedDivision === 'All' || officer.division === selectedDivision;
const matchesSearch =
officer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
(officer.station &&
officer.station.toLowerCase().includes(searchTerm.toLowerCase())) ||
officer.email.toLowerCase().includes(searchTerm.toLowerCase());
return matchesDivision && matchesSearch;
});


const cardVariants = {
hidden: { opacity: 0, y: 50 },
visible: (index: number) => ({
opacity: 1,
y: 0,
transition: {
delay: index * 0.05,
duration: 0.4,
ease: 'easeInOut',
},
}),
};


return (
<div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12">
<motion.div
initial={{ opacity: 0, y: 20 }}
animate={{ opacity: 1, y: 0 }}
transition={{ duration: 0.5, ease: 'easeInOut' }}
className="max-w-7xl mx-auto space-y-8"
>
{/* Header Section */}
<div className="text-center">
<h1 className="text-4xl font-extrabold text-gray-900 tracking-tight">
Thoothukudi Officers Directory
</h1>
<p className="mt-2 text-lg text-gray-600">
Find contact information for officers in various divisions.
</p>
</div>


{/* Search and Filter Section */}
<div className="flex flex-col md:flex-row items-center justify-between gap-4 px-4 sm:px-6 lg:px-8">
<div className="flex w-full md:w-auto gap-4">
<div className="relative flex-grow md:flex-grow-0">
<div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
<Search className="text-gray-400" size={20} />
</div>
<input
type="text"
placeholder="Search officers..."
className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
value={searchTerm}
onChange={(e) => setSearchTerm(e.target.value)}
/>
</div>
<div className="relative">
<select
className="block appearance-none w-full bg-white border border-gray-300 hover:border-gray-400 px-4 py-2 pr-8 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
value={selectedDivision}
onChange={(e) => setSelectedDivision(e.target.value)}
>
{divisions.map((division) => (
<option key={division} value={division}>
{division}
</option>
))}
</select>
<div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
<svg
className="fill-current h-4 w-4"
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 20 20"
>
<path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
</svg>
</div>
</div>
</div>
</div>


{/* Officer Cards Grid */}
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 px-4 sm:px-6 lg:px-8">
{filteredOfficers.map((officer, index) => (
<motion.div
key={index}
variants={cardVariants}
initial="hidden"
animate="visible"
custom={index}
className={`
bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300
${officer.isIPS ? 'border-4 border-gold-500' : ''}
${officer.isHeadOfficer ? 'bg-blue-50' : ''}
`}
>
<div className="p-6 space-y-4">
<div className="flex items-center space-x-4">
<div className="relative">
<img
src="https://bitlinks.bitsathy.ac.in/static/media/user.900505a2e95287f7e05c.jpg"
alt={officer.name}
className={`
w-16 h-16 rounded-full object-cover border-2
${officer.isIPS ? 'border-gold-500' : 'border-blue-200'}
`}
/>
{(officer.isIPS || officer.isHeadOfficer) && (
<div className="absolute bottom-0 right-0">
<Award
size={20}
className={`
${officer.isIPS ? 'text-gold-500' : 'text-blue-500'}
`}
/>
</div>
)}
</div>
<div>
<div className="flex items-center">
<h3 className="text-lg font-semibold text-gray-900">
{officer.name}
</h3>
{officer.isIPS && (
<span className="ml-2 px-2 py-1 bg-gold-100 text-gold-800 text-xs rounded-full">
IPS
</span>
)}
</div>
{officer.designation && (
<p className={`
text-sm
${officer.isHeadOfficer ? 'text-blue-600 font-semibold' : 'text-gray-500'}
`}>
{officer.designation}
</p>
)}
<p className="text-sm text-gray-500">{officer.division}</p>
</div>
</div>


<div className="space-y-2">
{officer.station && (
<div className="flex items-center text-gray-600">
<MapPin size={18} className="mr-2 text-blue-400" />
<span>{officer.station}</span>
</div>
)}
{officer.landline !== 'N/A' && (
<div className="flex items-center text-gray-600">
<Phone size={18} className="mr-2 text-blue-400" />
<span>{officer.landline}</span>
</div>
)}
{officer.mobile !== 'N/A' && (
<div className="flex items-center text-gray-600">
<Phone size={18} className="mr-2 text-blue-400" />
<span>{officer.mobile}</span>
</div>
)}
{officer.email !== 'N/A' && (
<div className="flex items-center text-gray-600">
<Mail size={18} className="mr-2 text-blue-400" />
<span>{officer.email}</span>
</div>
)}
</div>
</div>
</motion.div>
))}
</div>


{/* No Officers Found Message */}
{filteredOfficers.length === 0 && (
<div className="text-center py-12">
<p className="text-gray-500">
No officers found matching your search criteria.
</p>
</div>
)}
</motion.div>
</div>
);
};


export default Officers;



import React, { useState } from 'react';
import { motion } from 'framer-motion';
import {
 Settings,
 Bell,
 User,
 Shield,
 Lock,
 Zap,
 ChevronRight
} from 'lucide-react';


const SettingsPage: React.FC = () => {
 const [notifications, setNotifications] = useState({
   highPriorityCases: true,
   weeklyReports: true,
   systemAlerts: false
 });


 const [privacySettings, setPrivacySettings] = useState({
   dataSharing: false,
   anonymizeData: true
 });


 const [dashboardPreferences, setDashboardPreferences] = useState({
   defaultView: 'monthly',
   darkMode: false,
   refreshInterval: '15min'
 });


 const toggleSwitch = (category: string, setting: string) => {
   switch(category) {
     case 'notifications':
       setNotifications(prev => ({
         ...prev,
         [setting]: !prev[setting]
       }));
       break;
     case 'privacy':
       setPrivacySettings(prev => ({
         ...prev,
         [setting]: !prev[setting]
       }));
       break;
     case 'dashboard':
       setDashboardPreferences(prev => ({
         ...prev,
         [setting]: !prev[setting]
       }));
       break;
   }
 };


 const renderToggleSwitch = (isActive: boolean, onToggle: () => void) => (
   <div
     className={`w-14 h-7 rounded-full p-1 cursor-pointer transition-all duration-300 ease-in-out ${
       isActive ? 'bg-blue-600' : 'bg-gray-300'
     }`}
     onClick={onToggle}
   >
     <div
       className={`w-5 h-5 bg-white rounded-full shadow-md transform transition-transform duration-300 ${
         isActive ? 'translate-x-7' : 'translate-x-0'
       }`}
     />
   </div>
 );


 const SettingCard = ({
   icon: Icon,
   title,
   color,
   children
 }: {
   icon: React.ComponentType<{ className?: string, size?: number }>,
   title: string,
   color: string,
   children: React.ReactNode
 }) => (
   <motion.div
     initial={{ opacity: 0, y: 20 }}
     animate={{ opacity: 1, y: 0 }}
     transition={{ duration: 0.3 }}
     className="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300 overflow-hidden"
   >
     <div className={`flex items-center p-4 ${color} bg-opacity-10`}>
       <Icon className={`mr-3 ${color}`} size={24} />
       <h2 className="text-lg font-semibold text-gray-800">{title}</h2>
     </div>
     <div className="p-5 space-y-4">
       {children}
     </div>
   </motion.div>
 );


 return (
   <div className="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen p-8">
     <motion.div
       initial={{ opacity: 0, y: -20 }}
       animate={{ opacity: 1, y: 0 }}
       transition={{ duration: 0.5 }}
       className="mb-10"
     >
       <div className="flex justify-between items-center">
         <div>
           <h1 className="text-4xl font-bold text-gray-900 tracking-tight">Dashboard Settings</h1>
           <p className="mt-2 text-gray-600 text-lg">Customize your Crime Analytics experience</p>
         </div>
         <Settings className="text-gray-400" size={40} />
       </div>
     </motion.div>


     <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
       {/* Notifications Section */}
       <SettingCard
         icon={Bell}
         title="Notification Preferences"
         color="text-blue-500"
       >
         {Object.entries(notifications).map(([key, value]) => (
           <div key={key} className="flex justify-between items-center group">
             <span className="text-gray-700 capitalize group-hover:text-blue-600 transition">
               {key.replace(/([A-Z])/g, ' $1').toLowerCase()}
             </span>
             {renderToggleSwitch(value, () => toggleSwitch('notifications', key))}
           </div>
         ))}
       </SettingCard>


       {/* Privacy Settings */}
       <SettingCard
         icon={Shield}
         title="Privacy & Security"
         color="text-green-500"
       >
         {Object.entries(privacySettings).map(([key, value]) => (
           <div key={key} className="flex justify-between items-center group">
             <span className="text-gray-700 capitalize group-hover:text-green-600 transition">
               {key.replace(/([A-Z])/g, ' $1').toLowerCase()}
             </span>
             {renderToggleSwitch(value, () => toggleSwitch('privacy', key))}
           </div>
         ))}
       </SettingCard>


       {/* Dashboard Preferences */}
       <SettingCard
         icon={Zap}
         title="Dashboard Preferences"
         color="text-purple-500"
       >
         <div className="space-y-4">
           <div className="flex justify-between items-center group">
             <span className="text-gray-700 group-hover:text-purple-600 transition">Default View</span>
             <select
               className="px-3 py-2 border rounded-md text-sm bg-gray-50 focus:ring-2 focus:ring-purple-300 transition"
               value={dashboardPreferences.defaultView}
               onChange={(e) => setDashboardPreferences(prev => ({
                 ...prev,
                 defaultView: e.target.value
               }))}
             >
               <option value="monthly">Monthly</option>
               <option value="weekly">Weekly</option>
               <option value="yearly">Yearly</option>
             </select>
           </div>
           <div className="flex justify-between items-center group">
             <span className="text-gray-700 group-hover:text-purple-600 transition">Dark Mode</span>
             {renderToggleSwitch(
               dashboardPreferences.darkMode,
               () => toggleSwitch('dashboard', 'darkMode')
             )}
           </div>
           <div className="flex justify-between items-center group">
             <span className="text-gray-700 group-hover:text-purple-600 transition">Refresh Interval</span>
             <select
               className="px-3 py-2 border rounded-md text-sm bg-gray-50 focus:ring-2 focus:ring-purple-300 transition"
               value={dashboardPreferences.refreshInterval}
               onChange={(e) => setDashboardPreferences(prev => ({
                 ...prev,
                 refreshInterval: e.target.value
               }))}
             >
               <option value="15min">15 Minutes</option>
               <option value="30min">30 Minutes</option>
               <option value="1hr">1 Hour</option>
               <option value="manual">Manual</option>
             </select>
           </div>
         </div>
       </SettingCard>


       {/* User Profile Section */}
       <SettingCard
         icon={User}
         title="User Profile"
         color="text-indigo-500"
       >
         <div className="space-y-4">
           <div>
             <label className="block text-sm font-medium text-gray-700 mb-2">
               Username
             </label>
             <input
               type="text"
               className="w-full px-4 py-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-300 transition"
               placeholder="Crime Analyst"
             />
           </div>
           <div>
             <label className="block text-sm font-medium text-gray-700 mb-2">
               Email
             </label>
             <input
               type="email"
               className="w-full px-4 py-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-300 transition"
               placeholder="analyst@crimedata.com"
             />
           </div>
         </div>
       </SettingCard>


       {/* Security Section */}
       <SettingCard
         icon={Lock}
         title="Security"
         color="text-red-500"
       >
         <div className="space-y-4">
           <button className="w-full flex items-center justify-between bg-blue-600 text-white px-5 py-3 rounded-lg hover:bg-blue-700 transition group">
             <span>Change Password</span>
             <ChevronRight className="group-hover:translate-x-1 transition" />
           </button>
           <button className="w-full flex items-center justify-between bg-gray-200 text-gray-800 px-5 py-3 rounded-lg hover:bg-gray-300 transition group">
             <span>Two-Factor Authentication</span>
             <ChevronRight className="group-hover:translate-x-1 transition" />
           </button>
         </div>
       </SettingCard>
     </div>
   </div>
 );
};


export default SettingsPage;
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import {
 Settings,
 Bell,
 User,
 Shield,
 Lock,
 Zap,
 ChevronRight
} from 'lucide-react';


const SettingsPage: React.FC = () => {
 const [notifications, setNotifications] = useState({
   highPriorityCases: true,
   weeklyReports: true,
   systemAlerts: false
 });


 const [privacySettings, setPrivacySettings] = useState({
   dataSharing: false,
   anonymizeData: true
 });


 const [dashboardPreferences, setDashboardPreferences] = useState({
   defaultView: 'monthly',
   darkMode: false,
   refreshInterval: '15min'
 });


 const toggleSwitch = (category: string, setting: string) => {
   switch(category) {
     case 'notifications':
       setNotifications(prev => ({
         ...prev,
         [setting]: !prev[setting]
       }));
       break;
     case 'privacy':
       setPrivacySettings(prev => ({
         ...prev,
         [setting]: !prev[setting]
       }));
       break;
     case 'dashboard':
       setDashboardPreferences(prev => ({
         ...prev,
         [setting]: !prev[setting]
       }));
       break;
   }
 };


 const renderToggleSwitch = (isActive: boolean, onToggle: () => void) => (
   <div
     className={`w-14 h-7 rounded-full p-1 cursor-pointer transition-all duration-300 ease-in-out ${
       isActive ? 'bg-blue-600' : 'bg-gray-300'
     }`}
     onClick={onToggle}
   >
     <div
       className={`w-5 h-5 bg-white rounded-full shadow-md transform transition-transform duration-300 ${
         isActive ? 'translate-x-7' : 'translate-x-0'
       }`}
     />
   </div>
 );


 const SettingCard = ({
   icon: Icon,
   title,
   color,
   children
 }: {
   icon: React.ComponentType<{ className?: string, size?: number }>,
   title: string,
   color: string,
   children: React.ReactNode
 }) => (
   <motion.div
     initial={{ opacity: 0, y: 20 }}
     animate={{ opacity: 1, y: 0 }}
     transition={{ duration: 0.3 }}
     className="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300 overflow-hidden"
   >
     <div className={`flex items-center p-4 ${color} bg-opacity-10`}>
       <Icon className={`mr-3 ${color}`} size={24} />
       <h2 className="text-lg font-semibold text-gray-800">{title}</h2>
     </div>
     <div className="p-5 space-y-4">
       {children}
     </div>
   </motion.div>
 );


 return (
   <div className="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen p-8">
     <motion.div
       initial={{ opacity: 0, y: -20 }}
       animate={{ opacity: 1, y: 0 }}
       transition={{ duration: 0.5 }}
       className="mb-10"
     >
       <div className="flex justify-between items-center">
         <div>
           <h1 className="text-4xl font-bold text-gray-900 tracking-tight">Dashboard Settings</h1>
           <p className="mt-2 text-gray-600 text-lg">Customize your Crime Analytics experience</p>
         </div>
         <Settings className="text-gray-400" size={40} />
       </div>
     </motion.div>


     <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
       {/* Notifications Section */}
       <SettingCard
         icon={Bell}
         title="Notification Preferences"
         color="text-blue-500"
       >
         {Object.entries(notifications).map(([key, value]) => (
           <div key={key} className="flex justify-between items-center group">
             <span className="text-gray-700 capitalize group-hover:text-blue-600 transition">
               {key.replace(/([A-Z])/g, ' $1').toLowerCase()}
             </span>
             {renderToggleSwitch(value, () => toggleSwitch('notifications', key))}
           </div>
         ))}
       </SettingCard>


       {/* Privacy Settings */}
       <SettingCard
         icon={Shield}
         title="Privacy & Security"
         color="text-green-500"
       >
         {Object.entries(privacySettings).map(([key, value]) => (
           <div key={key} className="flex justify-between items-center group">
             <span className="text-gray-700 capitalize group-hover:text-green-600 transition">
               {key.replace(/([A-Z])/g, ' $1').toLowerCase()}
             </span>
             {renderToggleSwitch(value, () => toggleSwitch('privacy', key))}
           </div>
         ))}
       </SettingCard>


       {/* Dashboard Preferences */}
       <SettingCard
         icon={Zap}
         title="Dashboard Preferences"
         color="text-purple-500"
       >
         <div className="space-y-4">
           <div className="flex justify-between items-center group">
             <span className="text-gray-700 group-hover:text-purple-600 transition">Default View</span>
             <select
               className="px-3 py-2 border rounded-md text-sm bg-gray-50 focus:ring-2 focus:ring-purple-300 transition"
               value={dashboardPreferences.defaultView}
               onChange={(e) => setDashboardPreferences(prev => ({
                 ...prev,
                 defaultView: e.target.value
               }))}
             >
               <option value="monthly">Monthly</option>
               <option value="weekly">Weekly</option>
               <option value="yearly">Yearly</option>
             </select>
           </div>
           <div className="flex justify-between items-center group">
             <span className="text-gray-700 group-hover:text-purple-600 transition">Dark Mode</span>
             {renderToggleSwitch(
               dashboardPreferences.darkMode,
               () => toggleSwitch('dashboard', 'darkMode')
             )}
           </div>
           <div className="flex justify-between items-center group">
             <span className="text-gray-700 group-hover:text-purple-600 transition">Refresh Interval</span>
             <select
               className="px-3 py-2 border rounded-md text-sm bg-gray-50 focus:ring-2 focus:ring-purple-300 transition"
               value={dashboardPreferences.refreshInterval}
               onChange={(e) => setDashboardPreferences(prev => ({
                 ...prev,
                 refreshInterval: e.target.value
               }))}
             >
               <option value="15min">15 Minutes</option>
               <option value="30min">30 Minutes</option>
               <option value="1hr">1 Hour</option>
               <option value="manual">Manual</option>
             </select>
           </div>
         </div>
       </SettingCard>


       {/* User Profile Section */}
       <SettingCard
         icon={User}
         title="User Profile"
         color="text-indigo-500"
       >
         <div className="space-y-4">
           <div>
             <label className="block text-sm font-medium text-gray-700 mb-2">
               Username
             </label>
             <input
               type="text"
               className="w-full px-4 py-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-300 transition"
               placeholder="Crime Analyst"
             />
           </div>
           <div>
             <label className="block text-sm font-medium text-gray-700 mb-2">
               Email
             </label>
             <input
               type="email"
               className="w-full px-4 py-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-300 transition"
               placeholder="analyst@crimedata.com"
             />
           </div>
         </div>
       </SettingCard>


       {/* Security Section */}
       <SettingCard
         icon={Lock}
         title="Security"
         color="text-red-500"
       >
         <div className="space-y-4">
           <button className="w-full flex items-center justify-between bg-blue-600 text-white px-5 py-3 rounded-lg hover:bg-blue-700 transition group">
             <span>Change Password</span>
             <ChevronRight className="group-hover:translate-x-1 transition" />
           </button>
           <button className="w-full flex items-center justify-between bg-gray-200 text-gray-800 px-5 py-3 rounded-lg hover:bg-gray-300 transition group">
             <span>Two-Factor Authentication</span>
             <ChevronRight className="group-hover:translate-x-1 transition" />
           </button>
         </div>
       </SettingCard>
     </div>
   </div>
 );
};


export default SettingsPage;
export interface CrimeReport {
 id: string;
 title: string;
 description: string;
 type: string;
 latitude: number;
 longitude: number;
 status: 'pending' | 'investigating' | 'resolved';
 severity: 'low' | 'medium' | 'high';
 reported_by: string;
 reported_at: string;
 images?: string[];
 assigned_to?: string;
}


export interface PatrolMeeting {
 id: string;
 title: string;
 date: string;
 time: string;
 location: string;
 description: string;
 officers: string[];
 status: 'scheduled' | 'completed' | 'cancelled';
}


export interface FIR {
 id: string;
 complainant_name: string;
 complainant_address: string;
 incident_date: string;
 incident_location: string;
 incident_type: string;
 description: string;
 suspects?: string[];
 witnesses?: string[];
 evidence?: string[];
 status: 'draft' | 'filed' | 'investigating' | 'closed';
 filed_by: string;
 filed_at: string;
}


// Mock data for demonstration
export const MOCK_CRIME_DATA = {
 monthly_stats: [
   { month: 'Jan', cases: 65, resolved: 45 },
   { month: 'Feb', cases: 59, resolved: 40 },
   { month: 'Mar', cases: 80, resolved: 65 },
   { month: 'Apr', cases: 81, resolved: 60 },
   { month: 'May', cases: 56, resolved: 45 },
   { month: 'Jun', cases: 55, resolved: 40 },
 ],
 crime_types: [
   { type: 'Theft', count: 150 },
   { type: 'Assault', count: 80 },
   { type: 'Burglary', count: 60 },
   { type: 'Vandalism', count: 40 },
   { type: 'Fraud', count: 30 },
 ],
 hotspots: [
   { id: '1', location: 'Central Market', incidents: 25, lat: 8.7642, lng: 78.1348 },
   { id: '2', location: 'Bus Station', incidents: 18, lat: 8.7539, lng: 78.1354 },
   { id: '3', location: 'Harbor Area', incidents: 15, lat: 8.7519, lng: 78.1694 },
 ],
 recent_reports: [
   {
     id: '1',
     title: 'Shoplifting at Central Market',
     type: 'Theft',
     status: 'investigating',
     severity: 'medium',
     reported_at: '2024-03-15T10:30:00Z',
     location: 'Central Market'
   },
   {
     id: '2',
     title: 'Vehicle Break-in',
     type: 'Burglary',
     status: 'pending',
     severity: 'high',
     reported_at: '2024-03-15T09:15:00Z',
     location: 'Bus Station Parking'
   },
   {
     id: '3',
     title: 'Public Disturbance',
     type: 'Nuisance',
     status: 'resolved',
     severity: 'low',
     reported_at: '2024-03-14T18:45:00Z',
     location: 'Beach Road'
   }
 ]
};
import React from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider, useAuth } from './context/AuthContext';
import Layout from './components/Layout';
import Login from './pages/Login';
import Dashboard from './pages/Dashboard';
import CrimeMap from './pages/CrimeMap';
import Reports from './pages/Reports';
import Analytics from './pages/Analytics';
import Officers from './pages/Officers';
import Settings from './pages/Settings';


const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
 const { user, isLoading } = useAuth();


 if (isLoading) {
   return (
     <div className="min-h-screen flex items-center justify-center">
       <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
     </div>
   );
 }


 if (!user) {
   return <Navigate to="/login" replace />;
 }


 return <>{children}</>;
};


const AdminRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
 const { user } = useAuth();


 if (user?.role !== 'admin') {
   return <Navigate to="/" replace />;
 }


 return <>{children}</>;
};


function AppRoutes() {
 const { user } = useAuth();


 if (!user) {
   return (
     <Routes>
       <Route path="/login" element={<Login />} />
       <Route path="*" element={<Navigate to="/login" replace />} />
     </Routes>
   );
 }


 return (
   <Routes>
     <Route path="/" element={
       <ProtectedRoute>
         <Layout />
       </ProtectedRoute>
     }>
       <Route index element={<Dashboard />} />
       <Route path="crime-map" element={<CrimeMap />} />
       <Route path="reports" element={<Reports />} />
       <Route path="analytics" element={<Analytics />} />
       <Route path="officers" element={
         <AdminRoute>
           <Officers />
         </AdminRoute>
       } />
       <Route path="settings" element={<Settings />} />
     </Route>
     <Route path="*" element={<Navigate to="/" replace />} />
   </Routes>
 );
}


function App() {
 return (
   <AuthProvider>
     <BrowserRouter>
       <AppRoutes />
     </BrowserRouter>
   </AuthProvider>
 );
}


export default App